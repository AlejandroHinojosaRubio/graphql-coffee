scalar Date

interface Drink {
  name: String!
}

type Tea implements Drink {
  id: ID!
  name: String!
  brand: String!
  createdAt: Date
}

enum CoffeeType {
  ARABICA
  ROBUSTA
}

type Coffee implements Drink {
  """
  A unique identifier.
  """
  id: ID!
  name: String!
  brand: String!
  flavors: [Flavor!]
  createdAt: Date
  type: CoffeeType
}

type Flavor {
  id: ID!
  name: String!
}

"""
Create coffee input object type.
"""
input CreateCoffeeInput {
  """
  A new coffee name.
  """
  name: String!
  brand: String!
  flavors: [String!]!
  type: CoffeeType
}

"""
Update coffee input object type.
"""
input UpdateCoffeeInput {
  """
  A updated coffee name.
  """
  name: String
  brand: String
  flavors: [String!]!
  type: CoffeeType
}

input CreateTeaInput {
  name: String!
  brand: String!
}

input UpdateTeaInput {
  name: String!
  brand: String!
}

union DrinksResultUnion = Coffee | Tea

type Query {
  coffees: [Coffee!]!
  coffee(id: ID!): Coffee!
  teas: [Tea!]!
  tea(id: ID!): Tea!
  drinks: [DrinksResultUnion!]!
}

type Mutation {
  createCoffee(createCoffeeInput: CreateCoffeeInput!): Coffee!
  updateCoffee(id: ID!, updateCoffeeInput: UpdateCoffeeInput!): Coffee!
  removeCoffee(id: ID!): Coffee!
  createTea(createTeaInput: CreateTeaInput!): Tea!
  updateTea(id: ID!, updateTeaInput: UpdateTeaInput!): Tea!
  removeTea(id: ID!): Tea!
}

type Subscription {
  coffeeAdded: Coffee!
}
